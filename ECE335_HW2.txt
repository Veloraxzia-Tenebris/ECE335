Sonny Ji
ECE335
Homework #2

1)
	a)
		x is held by %rdi and sometimes %r8
		n is held by %rcx and %rsi
		result is held by %rax
		mask is held by %rdx
	b)
		Initially, result is 0 and mask is 1.
	c)
		testq tests if mask is 0.
	d)
		If mask passes the test condition, it is shifted to the left using the least significant byte of n.
	e)
		If mask passes the test condition, result becomes (mask AND x) OR (previous result).
2)
	The .s file generated by gcc -S -Og has:
		loop:
			.seh_endprologue
			movq	%rcx, %r10		// This is similar to movl %esi, %ecx in the original
			movq	%rdx, %rcx		// This is the optimization reusing registers to save space
			movl	$1, %eax			// Line 3 of the original
			movl	$0, %r8d			// Line 4 of the original
			jmp	.L2				// Line 5 of the original
		.L3:						// Line 6 of the original
			movq	%rax, %r9			// Line 7 of the original
			andq	%r10, %r9			// Line 8 of the original
			orq	%r9, %r8			// Line 9 of the original
			salq	%cl, %rax			// Line 10 of the original
		.L2:						// Line 11 of the original
			testq	%rax, %rax	// Line 12 of the original
			jne	.L3				// Line 13 of the original
			movq	%r8, %rax			// Setting %rax for returning
			ret					// Line 14 of the original
			.seh_endproc
			.def	__main;	.scl	2;	.type	32;	.endef
			.globl	main
			.def	main;	.scl	2;	.type	32;	.endef
			.seh_proc	main
	In my version:
		x is held by %rcx, moved to %r10
		n is held by %rdx, moved to %rcx
		result is held by %r8, moved to %rax for returning
		mask is held by %rax
		It uses %r9 instead of %r8 for the loop